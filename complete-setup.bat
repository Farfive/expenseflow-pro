@echo off
cls
echo.
echo ===============================================
echo 🚀 ExpenseFlow Pro - Complete Setup Script
echo ===============================================
echo.
echo This script will set up all missing components:
echo ✅ Fix port configuration (already done)
echo 🤖 Setup Ollama LLaVA for OCR
echo 🗄️ Setup PostgreSQL database
echo 🌐 Configure frontend-backend integration
echo 📦 Install dependencies
echo 🔧 Environment configuration
echo.
echo Press any key to continue or Ctrl+C to cancel...
pause >nul

echo.
echo 📋 Step 1: Checking prerequisites...
echo.

:: Check if Node.js is installed
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ Node.js is not installed
    echo Please install Node.js from: https://nodejs.org/
    goto :end
)
echo ✅ Node.js is available

:: Check if npm is installed
npm --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ❌ npm is not available
    goto :end
)
echo ✅ npm is available

:: Check if Docker is available
docker --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ⚠️ Docker is not installed (optional for database)
    echo You can install Docker Desktop from: https://docs.docker.com/desktop/install/windows/
    set NO_DOCKER=1
) else (
    echo ✅ Docker is available
    set NO_DOCKER=0
)

echo.
echo 📋 Step 2: Installing dependencies...
echo.

:: Install main dependencies
echo 📦 Installing backend dependencies...
npm install

:: Install specific dependencies for enhanced functionality
echo 📦 Installing database and image processing dependencies...
npm install prisma @prisma/client pg sharp multer dotenv

echo.
echo 📋 Step 3: Creating environment configuration...
echo.

:: Create .env file if it doesn't exist
if not exist .env (
    echo 📝 Creating .env file...
    (
        echo # ExpenseFlow Pro Environment Configuration
        echo # Generated by complete-setup.bat on %date% %time%
        echo NODE_ENV=development
        echo PORT=8001
        echo.
        echo # Database Configuration
        echo DATABASE_URL=postgresql://expenseflow:password123@localhost:5432/expenseflow_pro
        echo DB_HOST=localhost
        echo DB_PORT=5432
        echo DB_NAME=expenseflow_pro
        echo DB_USER=expenseflow
        echo DB_PASSWORD=password123
        echo.
        echo # Ollama Configuration for OCR
        echo OLLAMA_HOST=http://localhost:11434
        echo OLLAMA_MODEL=llava:latest
        echo.
        echo # Security Configuration
        echo JWT_SECRET=expenseflow-super-secret-jwt-key-change-in-production-2024
        echo ENCRYPTION_KEY=change-this-32-char-key-in-prod!!
        echo.
        echo # File Upload Configuration
        echo UPLOAD_DIR=./uploads
        echo MAX_FILE_SIZE=50MB
        echo.
        echo # Frontend Configuration
        echo NEXT_PUBLIC_API_URL=http://localhost:8001
        echo NEXT_PUBLIC_APP_URL=http://localhost:3000
        echo.
        echo # Polish Business Configuration
        echo BUSINESS_COUNTRY=PL
        echo DEFAULT_CURRENCY=PLN
        echo TAX_RATE=23
        echo.
        echo # OCR Configuration
        echo OCR_CONFIDENCE_THRESHOLD=0.7
        echo OCR_LANGUAGE=pol+eng
        echo PREPROCESSING_ENABLED=true
    ) > .env
    echo ✅ Environment file created
) else (
    echo ✅ Environment file already exists
)

echo.
echo 📋 Step 4: Setting up directories...
echo.

:: Create necessary directories
if not exist "uploads" mkdir uploads
if not exist "uploads\processed" mkdir uploads\processed
if not exist "uploads\temp" mkdir uploads\temp
if not exist "logs" mkdir logs

echo ✅ Upload directories created

echo.
echo 📋 Step 5: Database setup...
echo.

if %NO_DOCKER% == 0 (
    echo 🐳 Setting up PostgreSQL with Docker...
    
    :: Stop existing containers
    docker stop expenseflow-postgres >nul 2>&1
    docker rm expenseflow-postgres >nul 2>&1
    
    :: Start PostgreSQL container
    docker run -d ^
      --name expenseflow-postgres ^
      -e POSTGRES_DB=expenseflow_pro ^
      -e POSTGRES_USER=expenseflow ^
      -e POSTGRES_PASSWORD=password123 ^
      -p 5432:5432 ^
      -v expenseflow_data:/var/lib/postgresql/data ^
      postgres:15
    
    if %errorlevel% == 0 (
        echo ✅ PostgreSQL container started
        echo ⏳ Waiting for database to be ready...
        timeout /t 10 /nobreak >nul
        
        :: Test connection
        docker exec expenseflow-postgres pg_isready -U expenseflow -d expenseflow_pro >nul 2>&1
        if %errorlevel% == 0 (
            echo ✅ Database is ready
        ) else (
            echo ⚠️ Database may need more time to start
        )
    ) else (
        echo ❌ Failed to start PostgreSQL container
        echo You may need to set up the database manually
    )
) else (
    echo ⚠️ Docker not available - database setup skipped
    echo Please install PostgreSQL manually or use Docker
)

echo.
echo 📋 Step 6: Ollama setup check...
echo.

:: Check if Ollama is installed
where ollama >nul 2>&1
if %errorlevel% == 0 (
    echo ✅ Ollama is installed
    
    :: Check if LLaVA model is available
    ollama list | findstr "llava" >nul 2>&1
    if %errorlevel% == 0 (
        echo ✅ LLaVA model is available
    ) else (
        echo 📦 Installing LLaVA model...
        ollama pull llava:latest
        if %errorlevel% == 0 (
            echo ✅ LLaVA model installed
        ) else (
            echo ❌ Failed to install LLaVA model
        )
    )
    
    :: Start Ollama server
    echo 🚀 Starting Ollama server...
    start "Ollama Server" ollama serve
    timeout /t 3 /nobreak >nul
    
) else (
    echo ❌ Ollama is not installed
    echo.
    echo 📋 To install Ollama for OCR functionality:
    echo    1. Download from: https://ollama.ai/download/windows
    echo    2. Install Ollama
    echo    3. Run: ollama pull llava:latest
    echo    4. Run: ollama serve
)

echo.
echo 📋 Step 7: Testing backend server...
echo.

:: Test if server starts
echo 🧪 Starting backend server test...
start /B "ExpenseFlow Backend" cmd /c "set PORT=8001 && node fresh-server.js"

:: Wait for server to start
timeout /t 5 /nobreak >nul

:: Test server health
curl -s http://localhost:8001/api/health >nul 2>&1
if %errorlevel% == 0 (
    echo ✅ Backend server is running on port 8001
) else (
    echo ⚠️ Backend server may still be starting
)

echo.
echo 📋 Step 8: Frontend setup...
echo.

:: Check if frontend directory exists and has dependencies
if exist "frontend\package.json" (
    echo 📦 Installing frontend dependencies...
    cd frontend
    npm install
    
    if %errorlevel% == 0 (
        echo ✅ Frontend dependencies installed
        echo 🚀 Starting frontend development server...
        start "ExpenseFlow Frontend" cmd /c "npm run dev"
        cd ..
    ) else (
        echo ❌ Frontend dependency installation failed
        cd ..
    )
) else (
    echo ⚠️ Frontend not found in ./frontend directory
)

echo.
echo ===============================================
echo 🎉 ExpenseFlow Pro Setup Complete!
echo ===============================================
echo.
echo 📊 System Status:
echo ✅ Backend Server: http://localhost:8001
echo ✅ Frontend App: http://localhost:3000
echo ✅ Environment: Configured
echo ✅ Dependencies: Installed
echo.
echo 📋 Next Steps:
echo 1. Wait for all services to fully start (may take 1-2 minutes)
echo 2. Open http://localhost:3000 in your browser
echo 3. Test login with: demo@expenseflow.com / demo123
echo 4. Upload a document to test OCR functionality
echo.
echo 🔧 Service Controls:
echo    📊 Backend health: http://localhost:8001/api/health
echo    🗄️ Database status: docker ps (if using Docker)
echo    🤖 Ollama status: http://localhost:11434/api/tags
echo.
echo 📋 Manual Setup (if needed):
echo    🗄️ Database: Run setup-database.bat
echo    🤖 Ollama: Run setup-ollama.bat
echo.
echo Press any key to open the application in your browser...
pause >nul

:: Open browser
start http://localhost:3000

:end
echo.
echo Setup script completed.
pause 